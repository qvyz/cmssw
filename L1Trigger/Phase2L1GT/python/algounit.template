

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

use work.ipbus.all;
use work.emp_data_types.all;
use work.emp_project_decl.all;

use work.emp_device_decl.all;
use work.emp_ttc_decl.all;

use work.common_pkg.all;

entity p2gt_algos is
  generic (
    cut_offset : natural := 0
  );
  port (
    clk                 : in  std_logic; -- ipbus signals
    rst                 : in  std_logic;
    ipb_in              : in  ipb_wbus;
    ipb_out             : out ipb_rbus;
    clk_algo            : in  std_logic;
    rst_algo            : in  std_logic;
    clk40               : in  std_logic;
    rst40               : in  std_logic;
    objects_valid       : in  std_logic;
    objects             : in  t_obj_array(NUM_OBJ_TYPES - 1 downto 0);
    algo_bits_valid_out : out std_logic;
    algo_bits_out       : out std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0)
  );

end p2gt_algos;

architecture rtl of p2gt_algos is
  signal algo_bits_int2 : std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0) := (others => '0');
  signal algo_bits_srl1_int : std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0);
  signal algo_bits_srl2_int : std_logic_vector(NUM_ALGOS_IN_SRL - 1 downto 0);

  signal delayed_valid_to_payload : std_logic_vector(ALGO_REPLICATION_IN_SRL - 1 downto 0);
  signal delayed_valid_buffer : std_logic_vector(BX_ZERO_IN_BUF + 1 + ALGO_LATENCY - 1 downto 0); -- One additional tick used in delay line to register objects & valid bits.
 -------- SIGNALS ---------
 {% for key,value in algobits.items() %}
 signal {{key}} : std_logic := '0';
 {% endfor %}
-------- SIGNALS end ---------


begin
  ipb_out <= IPB_RBUS_NULL;

  process (clk_algo)
  begin
    if rising_edge(clk_algo) then
      delayed_valid_buffer <= delayed_valid_buffer(delayed_valid_buffer'high - 1 downto 0) & objects_valid;
    end if;
  end process;
-------- ALGORITHMS:---------- 

{{Conditions}}

-------- ALGORITHMS end---------- 


  reg_outputs : process (clk_algo) -- Register on algo clk for one BX
  begin
    if rising_edge(clk_algo) then
      {% for key,value in algobits.items() %}
      algo_bits_int2({{value}}) <= {{key}};
      {% endfor %}
      algo_bits_out <= algo_bits_int2;
    end if;
  end process;
  algo_bits_valid_out <= delayed_valid_buffer(delayed_valid_buffer'high);

end rtl;
